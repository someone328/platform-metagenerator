package io.vertx.cluster.platform.util;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Comparator;
import java.util.stream.Stream;

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.dircache.DirCache;
import org.eclipse.jgit.transport.JschConfigSessionFactory;
import org.eclipse.jgit.transport.OpenSshConfig;
import org.eclipse.jgit.transport.SshTransport;

import com.jcraft.jsch.Session;

public class GitCloneWrapper {

    public static void pushToUrl(String url) {
        try {
            Git git = Git.open(new File(calculateFolderNameFrom(url)));
            
            DirCache callRes = git.add()
               .setUpdate(false)
               .addFilepattern(".")
               .call();
            git.commit()
               .setMessage("Autogenerated")
               .call();
            git.push()
               .call();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public static void cloneUrl(String url) {
        try {
            System.out.println(url);
            FileRcursiveEraiser.deleteRecursive(calculateFolderNameFrom(url), false);
            Git git = Git.cloneRepository()
                         .setURI(url)
                         .setDirectory(new File(calculateFolderNameFrom(url)))
                         .setTransportConfigCallback(transport -> {
                             SshTransport sshTransport = (SshTransport) transport;
                             sshTransport.setSshSessionFactory(new JschConfigSessionFactory() {
                                 @Override
                                 protected void configure(OpenSshConfig.Host host, Session session) {
                                     session.setConfig("StrictHostKeyChecking",
                                                       "no");
                                 }

                                 /*
                                  * @Override protected JSch createDefaultJSch(FS fs) throws JSchException { JSch
                                  * defaultJSch = super.createDefaultJSch(fs);
                                  * defaultJSch.addIdentity("./id_rsa"); return defaultJSch; }
                                  */
                             });
                         })
                         .call();
            git.close();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

    }

    public static String calculateFolderNameFrom(String url) {
        return Stream.of(url.split("/"))
                     .filter(subPath -> subPath.endsWith(".git"))
                     .map(str -> str.substring(0,
                                               str.indexOf('.')))
                     .findFirst()
                     .get();
    }

}
